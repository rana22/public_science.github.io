"use strict";(self.webpackChunkICDC_Frontend=self.webpackChunkICDC_Frontend||[]).push([[630],{50630:(e,t,i)=>{i.r(t),i.d(t,{default:()=>u});var s=i(2340),a=i(11375),n=i(34105),r=i(88482),o=i(40541),c=i(92168);class u extends s.BaseSequenceAdapter{async initChromSizes(){const e=(0,c.readConfObject)(this.config,"chromSizesLocation");if("/path/to/default.chrom.sizes"!==e.uri&&""!==e.uri){const t=(0,a.openLocation)(e,this.pluginManager),i=await t.readFile("utf8");return Object.fromEntries(null==i?void 0:i.split(/\n|\r\n|\r/).filter((e=>!!e.trim())).map((e=>{const[t,i]=e.split("\t");return[t,+i]})))}}constructor(e,t,i){super(e,t,i);const s=this.pluginManager;this.chromSizesData=this.initChromSizes(),this.twobit=new o.TwoBitFile({filehandle:(0,a.openLocation)(this.getConf("twoBitLocation"),s)})}async getRefNames(){const e=await this.chromSizesData;return e?Object.keys(e):this.twobit.getSequenceNames()}async getRegions(){const e=await this.chromSizesData;if(e)return Object.keys(e).map((t=>({refName:t,start:0,end:e[t]})));const t=await this.twobit.getSequenceSizes();return Object.keys(t).map((e=>({refName:e,start:0,end:t[e]})))}getFeatures({refName:e,start:t,end:i}){return(0,n.ObservableCreate)((async s=>{const a=await this.twobit.getSequenceSize(e),n=void 0!==a?Math.min(a,i):i,o=await this.twobit.getSequence(e,t,n);o&&s.next(new r.default({id:`${e} ${t}-${n}`,data:{refName:e,start:t,end:n,seq:o}})),s.complete()}))}freeResources(){}}}}]);